on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  unit-tests:
    name: "Unit tests"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          node-version: "22.x"
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm run test
  e2e-tests:
    name: "Integration tests"
    runs-on: ubuntu-latest
    container: node:20-bookworm
    needs: [unit-tests]
    services:
      db:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: rampup
          POSTGRES_PASSWORD: password
          POSTGRES_DB: rampup
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          node-version: "22.x"
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm run test:e2e
  docker-build:
    name: "Build Docker Image"
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: vinicius507/rampup
          flavor: |
            latest=true
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push to Docker
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    name: "Deploy to Cloud Run"
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [docker-build]
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      - id: deploy
        name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          flags: >-
            --add-cloudsql-instances=${{ secrets.GCP_CLOUDSQL_INSTANCE }}
          service: rampup-api
          image: vinicius507/rampup
          secrets: |-
            DB_HOST=/cloudsql/${{ secrets.GCP_CLOUDSQL_INSTANCE }}
            DB_NAME=${{ vars.DB_NAME }}
            DB_USERNAME=${{ vars.DB_USERNAME }}
            DB_PASSWORD_FILE=/run/secrets/db_password
            /run/secrets/db_password=${{ secrets.DB_PASSWORD }}
